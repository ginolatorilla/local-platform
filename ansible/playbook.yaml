- name: Preparations
  tags: prepare
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Install required tools
      ansible.builtin.package:
        name:
          - kubernetes-cli
          - helm
          - lima
      become: "{{ ansible_os_family != 'Darwin' }}"

    - name: Create certificate outputs directory
      ansible.builtin.file:
        path: "{{ outputs_dir }}/certs"
        state: directory

    - name: Create signing key for own CA
      community.crypto.openssl_privatekey:
        path: "{{ outputs_dir }}/certs/ownca.key"
      register: ownca_privatekey

    - name: Create CSR for own CA
      community.crypto.openssl_csr:
        path: "{{ outputs_dir }}/certs/ownca.csr"
        privatekey_path: "{{ ownca_privatekey.filename }}"
        common_name: "My Local Platform"
        create_subject_key_identifier: true
        use_common_name_for_san: false
        basic_constraints:
          - "CA:TRUE"
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ownca_csr

    - name: Create own certificate authority (CA)
      community.crypto.x509_certificate:
        path: "{{ outputs_dir }}/certs/ownca.crt"
        privatekey_path: "{{ ownca_privatekey.filename }}"
        csr_path: "{{ ownca_csr.filename }}"
        provider: selfsigned
      register: ownca_crt

    - name: Remind to distribute own CA certificate
      ansible.builtin.debug:
        msg: "Please install the CA certificate, which you can find here: {{ ownca_crt.filename | realpath }}"

- name: Create Lima VM
  tags: compute
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Create Lima config directory
      ansible.builtin.file:
        path: "~/.lima/{{ virtual_machine.name }}"
        state: directory
      register: virtual_machine_config_dir

    - name: Render virtual machine configuration
      ansible.builtin.template:
        src: templates/lima.yaml.j2
        dest: "{{ virtual_machine_config_dir.path }}/lima.yaml"
      register: virtual_machine_config
      notify: restart vm

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Start virtual machine
      ansible.builtin.command:
        cmd: limactl start --name {{ virtual_machine.name }} --tty=false
        creates: "{{ virtual_machine_config_dir.path }}/*.pid"

  handlers:
    - name: Stop virtual machine
      ansible.builtin.command:
        cmd: limactl stop {{ virtual_machine.name }} --force
        removes: "{{ virtual_machine_config_dir.path }}/*.pid"
      listen: restart vm

- name: Install Kubernetes
  tags: kubeadm
  hosts: kubernetes
  vars:
    ansible_ssh_common_args: "-F {{ lookup('env', 'HOME') + '/.lima/kubernetes/ssh.config' }}"
  vars_files:
    - common_vars.yaml
  become: true
  tasks:
    - name: Install required tools
      ansible.builtin.apt:
        update_cache: true
        package:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg

    - name: Kernel module config
      ansible.builtin.copy:
        src: files/etc/modules-load.d/k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        mode: "0644"
      notify: kernel modules reconfig

    - name: IPv4 forwarding and bridged traffic for iptables config
      ansible.builtin.copy:
        src: files/etc/sysctl.d/k8s.conf
        dest: /etc/sysctl.d/k8s.conf
        mode: "0644"
      notify: sysctl reconfig

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Add CRIO apt repo signing keys
      ansible.builtin.apt_key:
        url: "https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ crio_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/cri-o-apt-keyring.gpg

    - name: Add CRIO apt repo
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ crio_version }}/deb/ /

    - name: Add Kubernetes apt repo signing keys
      ansible.builtin.apt_key:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /
        state: present

    - name: Install all Kubernetes binaries and dependencies
      ansible.builtin.apt:
        update_cache: true
        package:
          - kubelet
          - kubeadm
          - kubectl
          - cri-o

    - name: Launch services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
        masked: false
        state: started
      loop:
        - kubelet
        - crio

    - name: Configure kubeadm
      ansible.builtin.template:
        src: templates/etc/kubernetes/kubeadm.conf.j2
        dest: /etc/kubernetes/kubeadm.yaml
        mode: "0600"
      register: kubeadm
      notify:
        - reset cluster

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Install single-node Kubernetes cluster with kubeadm
      ansible.builtin.command:
        cmd: kubeadm init --config {{ kubeadm.dest }}
        creates: /etc/kubernetes/manifests/kube*.yaml

    - name: Get kubeconfig
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: "{{ outputs_dir }}/kubeconfig.conf"
        flat: true
        mode: "0600"

    - name: Replace server address in kubeconfig
      delegate_to: localhost
      become: false
      ansible.builtin.replace:
        path: "{{ outputs_dir }}/kubeconfig.conf"
        regexp: "server: .*:6443"
        replace: "server: https://localhost:6443"
        mode: "0600"

  handlers:
    - name: Load kernel modules
      ansible.builtin.command: "modprobe {{ item }}"
      loop:
        - overlay
        - br_netfilter
      register: cluster_bootstrap_modprobe
      changed_when: cluster_bootstrap_modprobe.rc != 0
      listen: kernel modules reconfig

    - name: Apply sysctl params without reboot
      ansible.builtin.command: sysctl --system
      register: cluster_bootstrap_sysctl
      changed_when: cluster_bootstrap_sysctl.rc != 0
      listen: sysctl reconfig

    - name: Reset cluster
      ansible.builtin.shell:
        cmd: |-
          set -o pipefail
          export KUBECONFIG=/etc/kubernetes/admin.conf

          for node in $(kubectl get --no-headers nodes | awk '{print $1}'); do
            kubectl drain $node --delete-emptydir-data --force --ignore-daemonsets
          done

          kubeadm reset -f
          iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
          command -v ipvsadm && ipvsadm -C
        executable: /bin/bash
        removes: /etc/kubernetes/*.conf
      ignore_errors: true
      listen: reset cluster

- name: Deploy apps in Kubernetes
  tags: apps
  hosts: localhost
  vars_files:
    - common_vars.yaml
  environment:
    KUBECONFIG: "{{ outputs_dir }}/kubeconfig.conf"
  tasks:
    - name: Add Helm repository for Calico
      kubernetes.core.helm_repository:
        name: projectcalico
        repo_url: https://docs.tigera.io/calico/charts

    - name: Deploy Calico as CNI
      kubernetes.core.helm:
        name: calico
        chart_ref: projectcalico/tigera-operator
        chart_version: v3.27.3
        release_namespace: tigera-operator
        create_namespace: true
        wait: true

    - name: Wait for Calico to be ready
      kubernetes.core.k8s:
        definition:
          apiVersion: operator.tigera.io/v1
          kind: Installation
          metadata:
            name: default
        wait: true
        wait_condition:
          type: Ready
          status: "True"
          reason: AllObjectsAvailable
