- name: Preparations
  tags:
    - prepare
    - registry
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Install required tools
      ansible.builtin.package:
        name:
          - kubernetes-cli
          - helm
          - lima
      become: "{{ ansible_os_family != 'Darwin' }}"

    - name: Create certificate outputs directory
      ansible.builtin.file:
        path: "{{ outputs_dir }}/certs"
        state: directory

    - name: Create signing key for own CA
      community.crypto.openssl_privatekey:
        path: "{{ outputs_dir }}/certs/ownca.key"
      register: ownca_privatekey

    - name: Create CSR for own CA
      community.crypto.openssl_csr:
        path: "{{ outputs_dir }}/certs/ownca.csr"
        privatekey_path: "{{ ownca_privatekey.filename }}"
        common_name: "My Local Platform"
        create_subject_key_identifier: true
        use_common_name_for_san: false
        basic_constraints:
          - "CA:TRUE"
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ownca_csr

    - name: Create own certificate authority (CA)
      community.crypto.x509_certificate:
        path: "{{ outputs_dir }}/certs/ownca.crt"
        privatekey_path: "{{ ownca_privatekey.filename }}"
        csr_path: "{{ ownca_csr.filename }}"
        provider: selfsigned
      register: ownca_crt

    - name: Remind to distribute own CA certificate
      ansible.builtin.debug:
        msg: "Please install the CA certificate, which you can find here: {{ ownca_crt.filename | realpath }}"

- name: Create Lima VM
  tags: compute
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Create Lima config directory
      ansible.builtin.file:
        path: "~/.lima/{{ virtual_machine.name }}"
        state: directory
      register: virtual_machine_config_dir

    - name: Render virtual machine configuration
      ansible.builtin.template:
        src: templates/lima.yaml.j2
        dest: "{{ virtual_machine_config_dir.path }}/lima.yaml"
      register: virtual_machine_config
      notify: restart vm

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Start virtual machine
      ansible.builtin.command:
        cmd: limactl start --name {{ virtual_machine.name }} --tty=false
        creates: "{{ virtual_machine_config_dir.path }}/*.pid"

  handlers:
    - name: Stop virtual machine
      ansible.builtin.command:
        cmd: limactl stop {{ virtual_machine.name }} --force
        removes: "{{ virtual_machine_config_dir.path }}/*.pid"
      listen: restart vm

- name: Install Kubernetes
  tags: kubeadm
  hosts: k8s
  vars:
    ansible_ssh_common_args: "-F {{ lookup('env', 'HOME') + '/.lima/' + virtual_machine.name + '/ssh.config' }}"
  vars_files:
    - common_vars.yaml
  become: true
  tasks:
    - name: Install own CA certificate
      ansible.builtin.copy:
        src: "{{ outputs_dir }}/certs/ownca.crt"
        dest: /usr/local/share/ca-certificates/ownca.crt
        mode: "0644"
      notify: update ca-certificates

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Install required tools
      ansible.builtin.apt:
        update_cache: true
        package:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg

    - name: Kernel module config
      ansible.builtin.copy:
        src: files/etc/modules-load.d/k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        mode: "0644"
      notify: kernel modules reconfig

    - name: IPv4 forwarding and bridged traffic for iptables config
      ansible.builtin.copy:
        src: files/etc/sysctl.d/k8s.conf
        dest: /etc/sysctl.d/k8s.conf
        mode: "0644"
      notify: sysctl reconfig

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Add CRIO apt repo signing keys
      ansible.builtin.apt_key:
        url: "https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ crio_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/cri-o-apt-keyring.gpg

    - name: Add CRIO apt repo
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ crio_version }}/deb/ /

    - name: Add Kubernetes apt repo signing keys
      ansible.builtin.apt_key:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /
        state: present

    - name: Install all Kubernetes binaries and dependencies
      ansible.builtin.apt:
        update_cache: true
        package:
          - kubelet
          - kubeadm
          - kubectl
          - cri-o

    - name: Launch services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
        masked: false
        state: started
      loop:
        - kubelet
        - crio

    - name: Configure Audit Policy
      ansible.builtin.copy:
        src: files/etc/kubernetes/audit-policy.yaml
        dest: /etc/kubernetes/audit-policy.yaml
        mode: "0644"

    - name: Configure kubeadm
      ansible.builtin.template:
        src: templates/etc/kubernetes/kubeadm.conf.j2
        dest: /etc/kubernetes/kubeadm.yaml
        mode: "0600"
      register: kubeadm
      notify:
        - reset cluster

    - name: Trigger reset cluster
      ansible.builtin.debug:
        msg: "{{ 'Cluster reset triggered' if reset_cluster is defined and reset_cluster else 'Cluster reset not required' }}"
      changed_when: reset_cluster is defined and reset_cluster
      notify:
        - reset cluster

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Install single-node Kubernetes cluster with kubeadm
      ansible.builtin.command:
        cmd: kubeadm init --config /etc/kubernetes/kubeadm.yaml
        creates: /etc/kubernetes/manifests/kube*.yaml

    - name: Get kubeconfig
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: "{{ outputs_dir }}/kubeconfig.conf"
        flat: true
        mode: "0600"

    - name: Replace server address in kubeconfig
      delegate_to: localhost
      become: false
      ansible.builtin.replace:
        path: "{{ outputs_dir }}/kubeconfig.conf"
        regexp: "server: .*:6443"
        replace: "server: https://localhost:6443"
        mode: "0600"

    - name: Create HAProxy config directory
      ansible.builtin.file:
        path: "/etc/haproxy"
        state: directory

    - name: Configure HAProxy for the ingress controller
      ansible.builtin.template:
        src: templates/etc/haproxy/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: "0644"
      notify: reload haproxy

    - name: Deploy HAProxy as a static pod
      ansible.builtin.copy:
        src: files/etc/kubernetes/manifests/haproxy.yaml
        dest: /etc/kubernetes/manifests/haproxy.yaml
        mode: "0644"

  handlers:
    - name: Update CA certificates
      ansible.builtin.command: update-ca-certificates
      when: ansible_os_family != 'Darwin'
      listen: update ca-certificates

    - name: Load kernel modules
      ansible.builtin.command: "modprobe {{ item }}"
      loop:
        - overlay
        - br_netfilter
      register: cluster_bootstrap_modprobe
      changed_when: cluster_bootstrap_modprobe.rc != 0
      listen: kernel modules reconfig

    - name: Apply sysctl params without reboot
      ansible.builtin.command: sysctl --system
      register: cluster_bootstrap_sysctl
      changed_when: cluster_bootstrap_sysctl.rc != 0
      listen: sysctl reconfig

    - name: Reset cluster
      ansible.builtin.shell:
        cmd: |-
          set -o pipefail
          export KUBECONFIG=/etc/kubernetes/admin.conf

          for node in $(kubectl get --no-headers nodes | awk '{print $1}'); do
            kubectl drain $node --delete-emptydir-data --force --ignore-daemonsets
          done

          kubeadm reset -f
          iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
          command -v ipvsadm && ipvsadm -C
        executable: /bin/bash
        removes: /etc/kubernetes/*.conf
      ignore_errors: true
      listen: reset cluster

    - name: Reload HAProxy
      environment:
        KUBECONFIG: "{{ outputs_dir }}/kubeconfig.conf"
      delegate_to: localhost
      become: false
      kubernetes.core.k8s_exec:
        namespace: kube-system
        pod: haproxy-{{ virtual_machine.name }}
        command: sh -c 'kill -HUP $(pidof haproxy)'
      ignore_errors: true
      listen: reload haproxy

- name: Container registry
  tags: registry
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Create signing key for Registry
      community.crypto.openssl_privatekey:
        path: "{{ outputs_dir }}/certs/registry.key"
      register: registry_privatekey

    - name: Create CSR for Registry
      community.crypto.openssl_csr:
        path: "{{ outputs_dir }}/certs/registry.csr"
        privatekey_path: "{{ registry_privatekey.filename }}"
        common_name: "My Container Registry"
        create_subject_key_identifier: true
        use_common_name_for_san: false
        subject_alt_name: "{{ registry.hosts | map('regex_replace', '^', 'DNS:') | list }}"
      register: registry_csr

    - name: debug
      ansible.builtin.debug:
        msg: "{{ registry_privatekey.keys() | list }}"

    - name: Create Registry TLS certificate
      community.crypto.x509_certificate:
        path: "{{ outputs_dir }}/certs/registry.crt"
        privatekey_path: "{{ registry_privatekey.filename }}"
        csr_path: "{{ registry_csr.filename }}"
        ownca_path: "{{ ownca_crt.filename }}"
        ownca_privatekey_path: "{{ ownca_privatekey.filename }}"
        provider: ownca
      register: registry_crt

    - name: Modify /etc/hosts on Kubernetes node
      delegate_to: k8s
      become: true
      vars:
        ansible_ssh_common_args: "-F {{ lookup('env', 'HOME') + '/.lima/' + virtual_machine.name + '/ssh.config' }}"
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regex: '([\da-fA-F:.]+)\s+host.lima.internal'
        line: '\1 host.lima.internal {{ registry.hosts | join(" ") }}'
        backrefs: true

- name: Deploy apps in Kubernetes
  tags: apps
  hosts: localhost
  vars_files:
    - common_vars.yaml
  environment:
    KUBECONFIG: "{{ outputs_dir }}/kubeconfig.conf"
  tasks:
    - name: Add Helm repository for Calico
      kubernetes.core.helm_repository:
        name: projectcalico
        repo_url: https://docs.tigera.io/calico/charts

    - name: Deploy Calico as CNI
      kubernetes.core.helm:
        name: calico
        chart_ref: projectcalico/tigera-operator
        chart_version: v3.27.3
        release_namespace: tigera-operator
        create_namespace: true
        wait: true

    - name: Wait for Calico to be ready
      kubernetes.core.k8s:
        definition:
          apiVersion: operator.tigera.io/v1
          kind: Installation
          metadata:
            name: default
        wait: true
        wait_condition:
          type: Ready
          status: "True"
          reason: AllObjectsAvailable
      notify: restart coredns

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers

    - name: Deploy ArgoCD
      kubernetes.core.helm:
        name: argocd
        chart_ref: oci://ghcr.io/argoproj/argo-helm/argo-cd
        chart_version: 7.7.3
        release_namespace: argocd
        create_namespace: true
        wait: true
        values_files:
          - ../kubernetes/helm-chart-apps/argo-cd/values.yaml

    - name: Create namespace for CertManager
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cert-manager

    - name: Install own CA as a secret in CertManager
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: own-ca
            namespace: cert-manager
          data:
            tls.crt: "{{ lookup('file', outputs_dir + '/certs/ownca.crt') | b64encode }}"
            tls.key: "{{ lookup('file', outputs_dir + '/certs/ownca.key') | b64encode }}"
      no_log: true

    - name: Deploy all other apps with ArgoCD
      kubernetes.core.k8s:
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: app-of-apps
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/ginolatorilla/local-platform.git
              targetRevision: HEAD
              path: kubernetes/argo-cd
            destination:
              name: in-cluster
              namespace: argocd
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: false
              syncOptions:
                - CreateNamespace=true
                - PrunePropagationPolicy=foreground
                - PruneLast=true
                - RespectIgnoreDifferences=true
                - ApplyOutOfSyncOnly=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
            revisionHistoryLimit: 0

    - name: Wait for Vault pod to be started
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: vault-0
            namespace: vault
        wait: true
        wait_condition:
          type: PodReadyToStartContainers
          status: "True"
      retries: 10

    - name: Check Vault Status
      kubernetes.core.k8s_exec:
        namespace: vault
        pod: vault-0
        container: vault
        command: vault status -tls-skip-verify
      register: vault_status
      retries: 3
      notify: unseal vault
      changed_when: vault_status.rc != 0
      failed_when: vault_status.rc == 1 # 2 means vault is sealed

    - name: Wait for handlers
      ansible.builtin.meta: flush_handlers
  handlers:
    - name: Restart coreDNS
      ansible.builtin.command: kubectl rollout restart -n kube-system deploy/coredns
      register: restart_coredns
      changed_when: restart_coredns.rc != 0
      listen: restart coredns

    - name: Unseal Vault
      environment:
        KUBECONFIG: "{{ outputs_dir }}/kubeconfig.conf"
      block:
        - name: Initialize Vault
          kubernetes.core.k8s_exec:
            namespace: vault
            pod: vault-0
            container: vault
            command: vault operator init
          register: vault_operator_init
          changed_when: vault_operator_init.rc != 0
          listen: unseal vault

        - name: Save Vault unseal keys to file
          ansible.builtin.copy:
            content: "{{ vault_operator_init.stdout }}"
            dest: "{{ outputs_dir }}/vault_unseal_keys.txt"
            mode: "0600"
          listen: unseal vault

        - name: Parse unseal keys
          set_fact:
            vault_unseal_keys: "{{ vault_operator_init.stdout | regex_findall('Unseal Key [0-9]+: ([a-zA-Z0-9+/=]+)') }}"
          listen: unseal vault

        - name: Parse root token
          set_fact:
            vault_root_token: "{{ vault_operator_init.stdout | regex_findall('Initial Root Token: ([a-zA-Z0-9.+/=]+)') }}"
          listen: unseal vault

        - name: Save Vault root token to Terraform repo
          ansible.builtin.copy:
            content: |-
              token="{{ vault_root_token[0] }}"
            dest: "../terraform/vault/local.auto.tfvars"
            mode: "0644"
          listen: unseal vault

        - name: Unseal Vault
          kubernetes.core.k8s_exec:
            namespace: vault
            pod: vault-0
            container: vault
            command: vault operator unseal "{{ item }}"
          register: vault_operator_unseal
          loop: "{{ vault_unseal_keys[:3] }}"
          changed_when: vault_operator_unseal.rc != 0
          listen: unseal vault

- name: Configure apps with Terraform
  tags: terraform
  hosts: localhost
  vars_files:
    - common_vars.yaml
  tasks:
    - name: Run Terraform Init
      ansible.builtin.command:
        cmd: terraform init
        chdir: ../terraform/vault
      register: terraform_init
      changed_when: terraform_init.rc != 0

    - name: Run Terraform Apply
      ansible.builtin.command:
        cmd: terraform apply -auto-approve
        chdir: ../terraform/vault
      register: terraform_apply
      changed_when: terraform_apply.rc != 0
